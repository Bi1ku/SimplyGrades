generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Teacher {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]
  avatar    String   @default("https://st3.depositphotos.com/6672868/13701/v/450/depositphotos_137014128-stock-illustration-user-profile-icon.jpg")
}

model Student {
  id                    String                  @id @default(uuid())
  firstName             String
  lastName              String
  email                 String                  @unique
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  studentsToClasses     StudentsToClasses[]
  studentsToAssignments StudentsToAssignments[]
  avatar                String                  @default("https://st3.depositphotos.com/6672868/13701/v/450/depositphotos_137014128-stock-illustration-user-profile-icon.jpg")
}

model Class {
  id                String              @id
  name              String
  teacherId         String
  teacher           Teacher             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  assignments       Assignment[]
  studentsToClasses StudentsToClasses[]
  subject           ClassSubject
  period            Int
}

model StudentsToClasses {
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([studentId, classId])
}

model Assignment {
  id                    String                  @id @default(uuid())
  name                  String
  classId               String
  class                 Class                   @relation(fields: [classId], references: [id], onDelete: Cascade)
  dueDate               DateTime
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  studentsToAssignments StudentsToAssignments[]
}

model StudentsToAssignments {
  studentId    String
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignmentId String
  grade        Float?
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([studentId, assignmentId])
}

enum ClassSubject {
  MATHEMATICS
  SCIENCE
  ENGLISH
  HISTORY
  FOREIGN_LANGUAGE
  ART
  MUSIC
  HEALTH
  PHYSICAL_EDUCATION
  TECHNOLOGY
  ENGINEERING
  COMPUTER_SCIENCE
  GEOGRAPHY
  SOCIAL_STUDIES
  OTHER
}
